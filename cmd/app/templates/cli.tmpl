{{ define "cli" }}package main

import (
	"fmt"

	"github.com/andygeiss/cloud-native-utils/messaging"
	"github.com/andygeiss/cloud-native-utils/service"
)

func main() {
	// Create a new context for a service and
	// exit on signals from the terminal.
	doneChan := make(chan bool)
	ctx, _ := service.Context()
	service.RegisterOnContextDone(ctx, func() {
		doneChan <- true
	})

	fmt.Println("ðŸš€ consumer started")

	// Create a new Kafka dispatcher and subscribe to the topic.
	client := messaging.NewKafkaDispatcher(ctx)
	client.Subscribe("{{ .Module }}", func(msg messaging.Message) error {
		fmt.Printf("  ðŸ“¨ {{ .Module }} - %s\n", string(msg.Data))
		return nil
	})

    fmt.Println("ðŸ•’ waiting for 5 seconds...")
	time.Sleep(5 * time.Second)

	// Produce a message to the topic.
	client.Publish("{{ .Module }}", messaging.NewMessage(
		[]byte("42!"),
		messaging.MessageTypeRemote,
	))

	// Handle errors from the dispatcher.
	if err := client.Error(); err != nil {
		fmt.Printf("ðŸš¨ error: %v\n", err)
	}

	// Wait for the context to be done.
	<-doneChan
	fmt.Println("\nðŸ‘‹ consumer stopped")
}
{{ end }}
